name: junk.test
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  workflow_dispatch: {}
  push:
    branches:
      - master
jobs:
  test:
    if: |
      github.event_name == 'push' || (
        (
          (github.event_name == 'issue_comment' && github.event.issue.pull_request) ||
          (github.event_name == 'pull_request_review_comment')
        ) &&
        contains(github.event.comment.body, '/test') &&
        !contains(github.event.comment.body, '/test skip')
      )
    runs-on: ubuntu-latest
    permissions:
      statuses: write
    steps:
      - id: head
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "${{ github.event_name }}" = issue_comment ] ; then
            echo "sha=$(gh api '${{ github.event.issue.pull_request.url }}' | jq -r .head.sha)" >> "${GITHUB_OUTPUT}"
          else
            echo "sha=${{ github.event.after || github.head_ref || github.event.pull_request.head.sha  }}" >> "${GITHUB_OUTPUT}"
          fi
      - uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.head.outputs.sha }}",
              state: "pending",
              context: context.workflow,
              target_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            });

      - id: start
        run: |
          printf 'timestamp=%(%s)T\n' >> "${GITHUB_OUTPUT}"

      - run: echo test ; sleep 2

      - id: result-message
        run: |
          printf -v now '%(%s)T'
          duration=$((now - ${{ steps.start.outputs.timestamp }}))
          echo "message=${duration}s" >> "${GITHUB_OUTPUT}"

      - uses: actions/github-script@v7
        if: ${{ failure() }}
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.head.outputs.sha }}",
              state: "failure",
              context: context.workflow,
              target_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              description: "${{ steps.result-message.outputs.message }}",
            });
      - uses: actions/github-script@v7
        if: ${{ success() }}
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.head.outputs.sha }}",
              state: "success",
              context: context.workflow,
              target_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              description: "${{ steps.result-message.outputs.message }}",
            });
      - uses: actions/github-script@v7
        if: ${{ !success() && !failure() }}
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: "${{ steps.head.outputs.sha }}",
              state: "error",
              context: context.workflow,
              target_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              description: "${{ steps.result-message.outputs.message }}",
            });
